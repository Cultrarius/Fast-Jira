{
  "swagger": "2.0",
  "info": {
    "title": "JiraAPI",
    "version": "1.0"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/rest/api/latest/issue/{issueIdOrKey}": {
      "get": {
        "operationId": "getIssue",
        "tags": [
          "Issues"
        ],
        "summary": "Get issue",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "The ID or key of the issue.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "type": "string"
          },
          {
            "name": "fieldsByKeys",
            "in": "query",
            "description": "Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.",
            "type": "boolean",
            "default": false
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.",
            "type": "string"
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:\n\n *  `*all` Returns all issue properties.\n *  Any issue property key, prefixed with a minus to exclude.\n\nExamples:\n\n *  `*all` Returns all properties.\n *  `*all,-prop1` Returns all properties except `prop1`.\n *  `prop1,prop2` Returns `prop1` and `prop2` properties.\n\nThis parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`.",
            "type": "string"
          },
          {
            "name": "updateHistory",
            "in": "query",
            "description": "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field.",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the request is successful.",
            "schema": {
              "$ref": "#/definitions/IssueBean"
            }
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing."
          },
          "404": {
            "description": "Returned if the issue is not found or the user does not have permission to view it."
          }
        }
      }
    },
    "/rest/api/latest/search": {
      "get": {
        "operationId": "searchIssues",
        "tags": [
          "Issue search"
        ],
        "summary": "Search for issues using JQL (GET)",
        "description": "Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).\n\nIf the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        "parameters": [
          {
            "name": "jql",
            "in": "query",
            "description": "The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:\n\n *  If no JQL expression is provided, all issues are returned.\n *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.\n *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.",
            "type": "string"
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The index of the first item to return in a page of results (page offset).",
            "type": "integer"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only.",
            "type": "integer",
            "default": 50
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  `summary,comment` Returns only the summary and comments fields.\n *  `-description` Returns all navigable (default) fields except description.\n *  `*all,-comment` Returns all fields except comments.\n\nThis parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.\n\nNote: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the request is successful.",
            "schema": {
              "$ref": "#/definitions/SearchResults"
            }
          },
          "400": {
            "description": "Returned if the JQL query is invalid."
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing."
          }
        }
      }
    }
  },
  "definitions": {
    "IssueBean": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the issue.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "description": "The URL of the issue details.",
          "format": "uri",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "The key of the issue.",
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "readOnly": true
          },
          "description": "Details of the issue properties identified in the request.",
          "readOnly": true
        },
        "names": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "readOnly": true
          },
          "description": "The ID and name of each field present on the issue.",
          "readOnly": true
        },
        "fields": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "SearchResults": {
      "type": "object",
      "properties": {
        "startAt": {
          "type": "integer",
          "description": "The index of the first item returned on the page.",
          "format": "int32",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "description": "The maximum number of results that could be on the page.",
          "format": "int32",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "description": "The number of results on the page.",
          "format": "int32",
          "readOnly": true
        },
        "issues": {
          "type": "array",
          "description": "The list of issues found by the search.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/IssueBean"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}
