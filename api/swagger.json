{
  "swagger": "2.0",
  "info": {
    "title": "JiraAPI",
    "version": "1.0"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/rest/api/3/issue/{issueIdOrKey}": {
      "get": {
        "operationId": "getIssue",
        "tags": [
          "Issues"
        ],
        "summary": "Get issue",
        "parameters": [
          {
            "name": "issueIdOrKey",
            "in": "path",
            "description": "The ID or key of the issue.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "type": "string"
          },
          {
            "name": "fieldsByKeys",
            "in": "query",
            "description": "Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.",
            "type": "boolean",
            "default": false
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.",
            "type": "string"
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:\n\n *  `*all` Returns all issue properties.\n *  Any issue property key, prefixed with a minus to exclude.\n\nExamples:\n\n *  `*all` Returns all properties.\n *  `*all,-prop1` Returns all properties except `prop1`.\n *  `prop1,prop2` Returns `prop1` and `prop2` properties.\n\nThis parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`.",
            "type": "string"
          },
          {
            "name": "updateHistory",
            "in": "query",
            "description": "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field.",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the request is successful.",
            "schema": {
              "$ref": "#/definitions/IssueBean"
            }
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing."
          },
          "404": {
            "description": "Returned if the issue is not found or the user does not have permission to view it."
          }
        }
      }
    }
  },
  "definitions": {
    "IssueBean": {
      "type": "object",
      "properties": {
        "expand": {
          "type": "string",
          "description": "Expand options that include additional issue details in the response.",
          "readOnly": true,
          "xml": {
            "attribute": true
          }
        },
        "id": {
          "type": "string",
          "description": "The ID of the issue.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "description": "The URL of the issue details.",
          "format": "uri",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "The key of the issue.",
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "readOnly": true
          },
          "description": "Details of the issue properties identified in the request.",
          "readOnly": true
        },
        "names": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "readOnly": true
          },
          "description": "The ID and name of each field present on the issue.",
          "readOnly": true
        },
        "fields": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}