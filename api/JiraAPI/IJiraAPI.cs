// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace FastJira
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// </summary>
    public partial interface IJiraAPI : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


            /// <summary>
        /// Get issue
        /// </summary>
        /// <param name='issueIdOrKey'>
        /// The ID or key of the issue.
        /// </param>
        /// <param name='fields'>
        /// </param>
        /// <param name='fieldsByKeys'>
        /// Whether fields in `fields` are referenced by keys rather than IDs.
        /// This parameter is useful where fields have been added by a
        /// connect app and a field's key may differ from its ID.
        /// </param>
        /// <param name='expand'>
        /// Use [expand](#expansion) to include additional information about
        /// the issues in the response. This parameter accepts a
        /// comma-separated list. Expand options include:
        /// 
        /// *  `renderedFields` Returns field values rendered in HTML format.
        /// *  `names` Returns the display name of each field.
        /// *  `schema` Returns the schema describing a field type.
        /// *  `transitions` Returns all possible transitions for the issue.
        /// *  `editmeta` Returns information about how each field can be
        /// edited.
        /// *  `changelog` Returns a list of recent updates to an issue,
        /// sorted by date, starting from the most recent.
        /// *  `versionedRepresentations` Returns a JSON array for each
        /// version of a field's value, with the highest number representing
        /// the most recent version. Note: When included in the request, the
        /// `fields` parameter is ignored.
        /// </param>
        /// <param name='properties'>
        /// A list of issue properties to return for the issue. This parameter
        /// accepts a comma-separated list. Allowed values:
        /// 
        /// *  `*all` Returns all issue properties.
        /// *  Any issue property key, prefixed with a minus to exclude.
        /// 
        /// Examples:
        /// 
        /// *  `*all` Returns all properties.
        /// *  `*all,-prop1` Returns all properties except `prop1`.
        /// *  `prop1,prop2` Returns `prop1` and `prop2` properties.
        /// 
        /// This parameter may be specified multiple times. For example,
        /// `properties=prop1,prop2&amp; properties=prop3`.
        /// </param>
        /// <param name='updateHistory'>
        /// Whether the project in which the issue is created is added to the
        /// user's **Recently viewed** project list, as shown under
        /// **Projects** in Jira. This also populates the [JQL issues
        /// search](#api-rest-api-3-search-get) `lastViewed` field.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IssueBean>> GetIssueWithHttpMessagesAsync(string issueIdOrKey, string fields = default(string), bool? fieldsByKeys = false, string expand = default(string), string properties = default(string), bool? updateHistory = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search for issues using JQL (GET)
        /// </summary>
        /// Searches for issues using
        /// [JQL](https://confluence.atlassian.com/x/egORLQ).
        /// 
        /// If the JQL query expression is too large to be encoded as a query
        /// parameter, use the [POST](#api-rest-api-3-search-post) version of
        /// this resource.
        /// 
        /// This operation can be accessed anonymously.
        /// 
        /// **[Permissions](#permissions) required:** Issues are included in
        /// the response where the user has:
        /// 
        /// *  *Browse projects* [project
        /// permission](https://confluence.atlassian.com/x/yodKLg) for the
        /// project containing the issue.
        /// *  If [issue-level
        /// security](https://confluence.atlassian.com/x/J4lKLg) is
        /// configured, issue-level security permission to view the issue.
        /// <param name='jql'>
        /// The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines
        /// the search. Note:
        /// 
        /// *  If no JQL expression is provided, all issues are returned.
        /// *  `username` and `userkey` cannot be used as search terms due to
        /// privacy reasons. Use `accountId` instead.
        /// *  If a user has hidden their email address in their user
        /// profile, partial matches of the email address will not find the
        /// user. An exact match is required.
        /// </param>
        /// <param name='startAt'>
        /// The index of the first item to return in a page of results (page
        /// offset).
        /// </param>
        /// <param name='maxResults'>
        /// The maximum number of items to return per page. To manage page
        /// size, Jira may return fewer items per page where a large number
        /// of fields are requested. The greatest number of items returned
        /// per page is achieved when requesting `id` or `key` only.
        /// </param>
        /// <param name='fields'>
        /// A list of fields to return for each issue, use it to retrieve a
        /// subset of fields. This parameter accepts a comma-separated list.
        /// Expand options include:
        /// 
        /// *  `*all` Returns all fields.
        /// *  `*navigable` Returns navigable fields.
        /// *  Any issue field, prefixed with a minus to exclude.
        /// 
        /// Examples:
        /// 
        /// *  `summary,comment` Returns only the summary and comments fields.
        /// *  `-description` Returns all navigable (default) fields except
        /// description.
        /// *  `*all,-comment` Returns all fields except comments.
        /// 
        /// This parameter may be specified multiple times. For example,
        /// `fields=field1,field2&amp;fields=field3`.
        /// 
        /// Note: All navigable fields are returned by default. This differs
        /// from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where
        /// the default is all fields.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SearchResults>> SearchIssuesWithHttpMessagesAsync(string jql = default(string), int? startAt = default(int?), int? maxResults = 50, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
